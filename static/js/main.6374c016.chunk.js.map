{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","addTodo","props","preventDefault","alert","onSubmit","this","style","borderBottom","boxShadow","placeholder","type","onChange","width","borderRadius","Component","App","console","log","filter","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAuBeA,EArBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAEdC,EAAWF,EAAMG,OACnBH,EAAMI,KAAK,SAAAC,GACP,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACvC,0BAAMC,QAAU,WAAOR,EAAWI,EAAKG,MAAQH,EAAKK,aAMlE,uBAAGJ,UAAU,UAAb,gCAEF,OACI,yBAAKA,UAAU,oBACVJ,IC6BES,E,4MA5CXC,MAAQ,CACJF,QAAS,I,EAGbG,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,QAASI,EAAEE,OAAOC,S,EAI1BC,aAAe,SAACJ,GAAO,IACXK,EAAY,EAAKC,MAAjBD,QACRL,EAAEO,iBACyB,KAAvB,EAAKT,MAAMF,QACXY,MAAM,6BAENH,EAAQ,EAAKP,MAAMF,SACnB,EAAKK,SAAS,CACVL,QAAS,O,uDAMjB,OACI,6BACI,yBAAKJ,UAAU,OACX,0BAAMiB,SAAUC,KAAKN,aAAcZ,UAAU,WACzC,yBAAKA,UAAU,OACX,yBAAKA,UAAU,uBACX,2BAAOmB,MAAO,CACVC,aAAc,oBACdC,UAAW,qBACZC,YAAY,eAAetB,UAAU,WAAWE,GAAG,OAAOqB,KAAK,OAAOC,SAAUN,KAAKX,aAAcI,MAAOO,KAAKZ,MAAMF,YAGhI,4BAAQe,MAAO,CAAEM,MAAO,OAAQC,aAAc,QAAU1B,UAAU,qCAAlE,iB,GArCF2B,aCoCPC,E,4MAjCbtB,MAAQ,CACNZ,MAAO,CACL,CAAEQ,GAAI,EAAGE,QAAS,iBAClB,CAAEF,GAAI,EAAGE,QAAS,8B,EAGtBT,WAAa,SAACO,GACZ2B,QAAQC,IAAI5B,GACZ,IAAMR,EAAQ,EAAKY,MAAMZ,MAAMqC,QAAO,SAAChC,GACrC,OAAOA,EAAI,KAAWG,KAExB,EAAKO,SAAS,CACZf,MAAOA,K,EAGXmB,QAAU,SAACT,GACTyB,QAAQC,IAAI1B,GACZ,IAAML,EAAO,CAAEG,GAAI8B,KAAKC,SAAU7B,QAASA,GAC3C,EAAKK,SAAS,CACZf,MAAM,GAAD,mBAAM,EAAKY,MAAMZ,OAAjB,CAAwBK,O,uDAI/B,OACE,yBAAKC,UAAU,sBACb,wBAAIA,UAAU,oBAAd,YACA,kBAAC,EAAD,CAAON,MAAOwB,KAAKZ,MAAMZ,MAAOC,WAAYuB,KAAKvB,aACjD,kBAAC,EAAD,CAASkB,QAASK,KAAKL,e,GA5Bbc,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.6374c016.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n\r\n    const todoList = todos.length ? (\r\n        todos.map( todo => {\r\n            return (\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <span onClick={ () => {deleteTodo(todo.id)} }>{todo.content}</span>\r\n                </div>\r\n            );\r\n        })\r\n    ) \r\n    : \r\n    ( <p className=\"center\"> You have no Todo's left... </p> );\r\n    \r\n    return (\r\n        <div className=\"todos collection\">\r\n            {todoList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react'\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        const { addTodo } = this.props;\r\n        e.preventDefault();\r\n        if (this.state.content === '') {\r\n            alert('cannot add empty todo...');\r\n        } else {\r\n            addTodo(this.state.content);\r\n            this.setState({\r\n                content: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <form onSubmit={this.handleSubmit} className=\"col s12\">\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s12\">\r\n                                <input style={{\r\n                                    borderBottom: '1px solid #2196F3',\r\n                                    boxShadow: '0 1px 0 0 #2196F3'\r\n                                }} placeholder=\"add new todo\" className=\"validate\" id=\"todo\" type=\"text\" onChange={this.handleChange} value={this.state.content} />\r\n                            </div>\r\n                        </div>\r\n                        <button style={{ width: '100%', borderRadius: \"50px\" }} className=\"btn waves-effect waves-light blue\">Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport Todos from './Todos';\r\nimport AddTodo from './AddTodo';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [\r\n      { id: 1, content: \"learn reactJS\" },\r\n      { id: 2, content: \"play assassin's creed II\" },\r\n    ]\r\n  }\r\n  deleteTodo = (id) => {\r\n    console.log(id);\r\n    const todos = this.state.todos.filter((todo) => {\r\n      return todo['id'] !== id;\r\n    });\r\n    this.setState({\r\n      todos: todos\r\n    });\r\n  };\r\n  addTodo = (content) => {\r\n    console.log(content);\r\n    const todo = { id: Math.random(), content: content };\r\n    this.setState({\r\n      todos: [...this.state.todos, todo]\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"todo-app container\">\r\n        <h1 className=\"center blue-text\"> Todo's </h1>\r\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\r\n        <AddTodo addTodo={this.addTodo} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}